import os
import google.generativeai as genai

from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Get the Google API key from environment variables
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")

# Configure the Google Generative AI with the API key
genai.configure(api_key=GOOGLE_API_KEY)

# Define the configuration for the generative model
generation_config = {
    "temperature": 0.7,
    "top_p": 1,
    "top_k": 32,
    "max_output_tokens": 8192,
}

def handle_gemini_model(input_text):
    """
    Function to handle the Gemini model.

    Parameters:
    input_text (str): The input text to be processed by the model.

    Returns:
    str: The text generated by the model.
    """
    # Initialize the generative model with the 'gemini-pro' model and the defined configuration
    model = genai.GenerativeModel('gemini-pro', generation_config=generation_config)

    # Start a chat with the model
    chat = model.start_chat(history=[])

    # Send the input text to the model and get the response
    response = chat.send_message(input_text)

    # Return the text generated by the model
    return response.text

def handle_gemini_image(image):
    """
    Function to handle the Gemini image model.

    Parameters:
    image (Image): The image to be processed by the model.

    Returns:
    str: The text generated by the model.
    """
    # Define the prompt for the model
    prompt = "If image have text, transcribe it, otherwise describe it."

    # Initialize the generative model with the 'gemini-pro-vision' model
    model = genai.GenerativeModel('gemini-pro-vision')

    # Generate content with the model using the defined prompt and the image
    response = model.generate_content(contents=[prompt, image])

    # Resolve the response
    response.resolve()

    # Return the text generated by the model
    return response.text